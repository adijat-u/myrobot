{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","SearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOA2BgBA,EAvBH,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GAG3B,OAGA,yBAAKC,UAAU,qDAEf,yBAAMC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBAEtB,6BACE,4BAAKF,GAEP,2BAAIC,OCqBWK,EAhCE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEpB,OACA,6BAIAA,EAAOC,KAAI,SAACC,EAAMC,GAElB,OAEA,kBAAC,EAAD,CAEAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KACfC,MAAOM,EAAOG,GAAGT,aCMHW,EAvBI,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAElC,OAEA,yBAAKX,UAAY,OAGjB,2BAEAA,UAAU,mCAEVY,KAAK,SACJC,YAAY,eACbC,SAAUH,MCEKI,EAhBA,SAACC,GAEd,OAEE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAElEJ,EAAMK,WC+DEC,G,kBA/Df,aAAe,IAAD,8BAEZ,+CAoBFC,eAAiB,SAACC,GAClB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAnBxC,EAAKC,MAAS,CAEXxB,OAAQ,GAEXM,YAAa,IARD,E,iFAaM,IAAD,OACjBmB,MAAM,8CAEDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAEzBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAErB,OAAQ6B,S,+BAQjC,IAAD,EACsBC,KAAKN,MAA9BxB,EADG,EACHA,OAAQM,EADL,EACKA,YACNyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GAEvC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAGtD,OAAQlC,EAAOoC,OAMZ,yBAAMxC,UAAU,MAEhB,wBAAIA,UAAU,MAAd,iBAEA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KAEA,kBAAC,EAAD,CAAUnB,OAAQ+B,MAZrB,4C,GApCkBM,cCICC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.8d403ba0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//JXS\r\n\r\nconst Card = ({ name,email,id}) => {\r\n// destructure\r\n\r\nreturn (\r\n//header \r\n\r\n<div className='bg-light-green dib br3 pa3 ma2 grow btw2 shadow-5'>\r\n\r\n<img  alt='Robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n       \r\n<div>\r\n  <h2>{name}</h2>\r\n\r\n<p>{email}</p>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n);\r\n\r\n}\r\n\r\n export default Card;\r\n\r\n","\r\nimport React from 'react';\r\n//import Card from './Card';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\nreturn (\r\n<div>\r\n\r\n{\r\n\r\nrobots.map((user, i) => {\t\r\n\r\nreturn (\r\n\r\n<Card \r\n\r\nkey={i}\r\nid={robots[i].id}\r\nname={robots[i].name}\r\n email={robots[i].email}\r\n\r\n />\r\n\r\n );\r\n\r\n})\r\n\r\n}\r\n\r\n</div>\r\n\r\n);\r\n\r\n}\r\n\r\nexport default CardList;","import React  from  'react';\r\n\r\n\r\n\r\n\r\nconst SearchBox  = ({searchfield, SearchChange}) => {\r\n\r\nreturn (\r\n\r\n<div className = 'pa2'>\r\n\r\n\r\n<input \r\n\r\nclassName='pa3 ba b--green bg-lightest-blue'\r\n\r\ntype='search'\r\n placeholder='Search robot' \r\nonChange={SearchChange}\r\n/>\r\n\r\n</div>\r\n\r\n);\r\n\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n  return (\r\n\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\r\n      {props.children}\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n};\r\n\r\n\r\n\r\nexport default Scroll;","\n\nimport React, {Component} from 'react';\nimport CardList from '../component/CardList';\nimport SearchBox from '../component/SearchBox';\nimport Scroll from '../component/Scroll';\nimport './App.css'; \n\nclass  App extends Component {\n\nconstructor() {\n\n  super();\n\n  this.state =  {\n\n     robots: [],\n\n  searchfield: ''\n }\n\n}\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n\n      .then(response=> response.json())\n\n      .then(users => this.setState({ robots: users}));\n\n  }\n\nonSearchChange = (event) => {\nthis.setState({ searchfield: event.target.value })\n  }\n\n  render() {\nconst { robots, searchfield }  = this.state;\n    const filteredRobots = robots.filter(robot => {\n\n  return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\n})\n return !robots.length?\n <h1> loading</h1>:\n\n(\n\n\n    <diV  className='tc' >\n    \n    <h1 className='f2'>RobotsFriends</h1> \n    \n    <SearchBox SearchChange={this.onSearchChange} />\n    <Scroll>\n\n    <CardList robots={filteredRobots} /> \n\n    </Scroll>\n\n    </diV>\n    \n        );\n\n\n\n \n\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}